{"Design/UML-Diagrams/Enumerations/AddOn":{"title":"AddOn","links":[],"tags":[],"content":"This enumeration represents additional features or treatments that can be applied to the glazing.\n\nLAMINATED: A type of safety glass that holds together when shattered.\nTEMPERED: A type of safety glass processed by controlled thermal treatments to increase its strength.\nSOLARBAN_60: A specific type of glazing that offers solar control.\nSOLARBAN_70: Another type of glazing that offers enhanced solar control.\nOBSCURED: Glass that has been made translucent to offer privacy.\nSATIN_ETCHED: Glass that has a frosted finish.\nARGON_GAS: Dual-pane windows filled with argon gas between the panes to offer better insulation.\n"},"Design/UML-Diagrams/Enumerations/Design":{"title":"Design","links":[],"tags":[],"content":"This enumeration represents the different design patterns or styles that can be applied to a sash.\n\nDEFAULT: The standard design without any special patterns.\nARCH: A sash that has an arched top.\nBENT: A sash that has a bent or curved shape.\nCUSTOM: A unique design specified by the customer.\n"},"Design/UML-Diagrams/Enumerations/Finish":{"title":"Finish","links":[],"tags":[],"content":"This enumeration represents the different finishes that can be applied to a sash.\n\nPRIMED: The sash has been primed and is ready for painting.\nPAINTED: The sash has been painted.\nSTAINED: The sash has been stained to show the wood grain.\nCUSTOM: A unique finish specified by the customer.\n"},"Design/UML-Diagrams/Enumerations/GlazingType":{"title":"GlazingType","links":[],"tags":[],"content":"This enumeration represents the different types of glazing that can be applied to a window.\n\nSINGLE_PANE: A window that has only one layer of glass.\nDUAL_PANE: A window that has two layers of glass, often with a space between them for insulation.\n"},"Design/UML-Diagrams/Enumerations/ProjectStatus":{"title":"ProjectStatus","links":[],"tags":[],"content":"This enumeration represents the various stages a project can be in during its lifecycle.\n\nINITIATED: The project has been started but work may not have begun.\nIN_PROGRESS: Active work is being done on the project.\nCOMPLETED: All work related to the project has been finished.\nON_HOLD: The project has been temporarily paused, possibly due to external factors or resource constraints.\n"},"Design/UML-Diagrams/Enumerations/QuoteStatus":{"title":"QuoteStatus","links":[],"tags":[],"content":"This enumeration represents the various stages or statuses a quote can be in during its lifecycle.\n\nPENDING: The quote has been created but not yet reviewed or approved.\nAPPROVED: The quote has been reviewed and accepted by the customer or relevant authority.\nREJECTED: The quote has been reviewed and declined.\nREVISED: The quote has been modified after initial creation, possibly due to changes in requirements or errors.\nSUPERSEDED: The quote has been replaced by a newer version.\nWITHDRAWN: The quote has been withdrawn before approval, possibly because it’s no longer relevant or needed.\nEXPIRED: The quote had a validity period, and that period has lapsed without approval.\n"},"Design/UML-Diagrams/Enumerations/WindowType":{"title":"WindowType","links":[],"tags":[],"content":"This enumeration represents the different types of windows that can be installed or replaced.\n\nSINGLE_HUNG: A window where only the bottom part moves vertically.\nDOUBLE_HUNG: A window where both the top and bottom parts can move vertically.\nFIXED: A window that doesn’t open and is fixed in place.\nCASEMENT: A window that is hinged at the side and opens outward.\nDOUBLE_CASEMENT: Two casement windows side by side.\nTRANSOM: A small window that is typically used over doors or other windows to let in more light.\nAWNING: A window that is hinged at the top and opens outward.\nPIVOT: A window that rotates around a central point, either horizontally or vertically.\n"},"Design/UML-Diagrams/UML-Design":{"title":"UML Design","links":["Design/UML-Diagrams/UML-Graph","Design/UML-Diagrams/Enumerations/QuoteStatus","Design/UML-Diagrams/Enumerations/ProjectStatus","Design/UML-Diagrams/Enumerations/WindowType","Design/UML-Diagrams/Enumerations/GlazingType","Design/UML-Diagrams/Enumerations/AddOn","Design/UML-Diagrams/Enumerations/Design","Design/UML-Diagrams/Enumerations/Finish"],"tags":[],"content":"Textual representation of the UML Graph\nClasses §\nQuote §\n\nAttributes:\n\nquoteID: int\nprojectID: int\nwindows: list&lt;Window&gt;\nsubtotal: double\ntax: double\ntotal: double\nstatus: QuoteStatus\nreasonForStatus: string\ndateCreated: date\ndateModified: date\nnotes: string\n\n\nMethods:\n\nAddWindow(window: Window): void\nRemoveWindow(windowID: int): void\nUpdateWindow(window: Window): void\nCalculateSubtotal(): double\nCalculateTax(): double\nCalculateTotal(): double\nGetQuoteDetails(): dict\nGeneratePDF(): void\n\n\n\nCustomer §\n\nAttributes:\n\ncustomerID: int\nname: string\nemail: string\nphoneNumber: string\naddress: string\nprojectAddress: string\nprojects: list&lt;Project&gt;\n\n\nMethods:\n\nUpdateDetails(details: dict): void\nGetCustomerDetails(): dict\n\n\n\nProject §\n\nAttributes:\n\nprojectID: int\ncustomer: Customer\nquotes: list&lt;Quote&gt;\nstatus: ProjectStatus\ndateStarted: date\nestimatedCompletionDate: date\n\n\nMethods:\n\nAddQuote(quote: Quote): void\nRemoveQuote(quoteID: int): void\nUpdateStatus(status: string): void\nGetProjectDetails(): dict\n\n\n\nWindow §\n\nAttributes:\n\nwindowID: int\ntype: WindowType\nwidth: double\nheight: double\ndescription: string\nsashes: list&lt;Sash&gt;\ninstallationCost: double\n\n\nMethods:\n\nAddSash(sash: Sash): void\nRemoveSash(sashID: int): void\nGetSashes(): list&lt;Sash&gt;\nCalculateCost()\nPrintData()\n\n\n\nSash §\n\nAttributes:\n\nsashID: int\nwindowID: int\nwidth: double\nheight: double\nperimeter: double\nframeCost: double\nnumLites: int\ndesign: Design\nfinish: Finish\nglazings: list&lt;Glazing&gt;\n\n\nMethods:\n\nCalculatePerimeter()\nCalculateDesignCost()\nCalculateFinishCost()\nAddGlazing(glazing: Glazing): void\nRemoveGlazing(glazingID: int): void\nGetGlazings(): list&lt;Glazing&gt;\n\n\n\nGlazing §\n\nAttributes:\n\nglazingID: int\ntype: GlazingType\narea: double\ncost: double\naddOns: list&lt;AddOn&gt;\n\n\nMethods:\n\nCalculateArea()\nCalculateAddOnCost()\nAddAddOn(addOn: Addon): void\nRemoveAddOn(addOnID: int): void\nGetAddOns(): list&lt;AddOn&gt;\n\n\n\nRateCard §\n\nAttributes:\n\nitemType: string (e.g., “wood”, “glazing”, “design”, “finish”)\nitemName: string (e.g., ”DOUGLAS_FIR”, ”LAMINATED“)\nrate: double\n\n\nMethods:\n\nGetRate(itemType: string, itemName: string): double\nUpdateRate(itemType: string, itemName: string, newRate: double): void\n\n\n\nEnumerations §\n\nQuoteStatus: PENDING, APPROVED, REJECTED, REVISED, SUPERSEDED, WITHDRAWN, EXPIRED\nProjectStatus: INITIATED, IN_PROGRESS, COMPLETED, ON_HOLD\nWindowType: SINGLE_HUNG, DOUBLE_HUNG, FIXED, CASEMENT, DOUBLE_CASEMENT, TRANSOM, AWNING, PIVOT\nGlazingType: SINGLE_PANE, DUAL_PANE\nAddOn: LAMINATED, TEMPERED, SOLARBAN_60,  SOLARBAN_70, OBSCURED, SATIN_ETCHED, ARGON_GAS\nDesign: DEFAULT, ARCH, BENT, CUSTOM\nFinish: PRIMED, PAINTED, STAINED, CUSTOM\n\nRelationships §\n\nQuote has a one-to-many relationship with Window.\nQuote has a many-to-one relationship with Project.\nCustomer has a one-to-many relationship with Project.\nProject has a one-to-many relationship with Quote.\nWindow has a one-to-many relationship with Sash.\nWindow has a many-to-one relationship with Quote.\nSash has a many-to-one relationship with Window.\nSash has a one-to-many relationship with Glazing.\n"},"Design/UML-Diagrams/UML-Graph":{"title":"UML Graph","links":["Design/UML-Diagrams/UML-Design"],"tags":[],"content":"Visual representation of the UML Design\n\nclassDiagram\n    class Quote {\n        + quoteID: int\n        + projectID: int\n        + windows: list&lt;Window&gt;\n        + subtotal: double\n        + tax: double\n        + total: double\n        + status: QuoteStatus\n        + dateCreated: date\n        + dateModified: date\n        + notes: string\n        + AddWindow(window: Window): void\n        + RemoveWindow(windowID: int): void\n        + UpdateWindow(window: Window): void\n        + CalculateSubtotal(): double\n        + CalculateTax(): double\n        + CalculateTotal(): double\n        + GetQuoteDetails(): dict\n        + GeneratePDF(): void\n    }\n\n    class Customer {\n        + customerID: int\n        + name: string\n        + email: string\n        + phoneNumber: string\n        + address: string\n        + projectAddress: string\n        + projects: list&lt;Project&gt;\n        + UpdateDetails(details: dict): void\n        + GetCustomerDetails(): dict\n    }\n\n    class Project {\n        + projectID: int\n        + customer: Customer\n        + quotes: list&lt;Quote&gt;\n        + status: ProjectStatus\n        + dateStarted: date\n        + estimatedCompletionDate: date\n        + AddQuote(quote: Quote): void\n        + RemoveQuote(quoteID: int): void\n        + UpdateStatus(status: string): void\n        + GetProjectDetails(): dict\n    }\n\n    class Window {\n        + windowID: int\n        + type: WindowType\n        + width: double\n        + height: double\n        + description: string\n        + sashes: list&lt;Sash&gt;\n        + installationCost: double\n        + AddSash(sash: Sash): void\n        + RemoveSash(sashID: int): void\n        + GetSashes(): list&lt;Sash&gt;\n        + CalculateCost()\n        + PrintData()\n    }\n\n    class Sash {\n        + sashID: int\n        + windowID: int\n        + width: double\n        + height: double\n        + perimeter: double\n        + frameCost: double\n        + numLites: int\n        + design: Design\n        + finish: Finish\n        + glazings: list&lt;Glazing&gt;\n        + CalculatePerimeter()\n        + CalculateDesignCost()\n        + CalculateFinishCost()\n        + AddGlazing(glazing: Glazing): void\n        + RemoveGlazing(glazingID: int): void\n        + GetGlazings(): list&lt;Glazing&gt;\n    }\n\n    class Glazing {\n        + glazingID: int\n        + type: GlazingType\n        + area: double\n        + cost: double\n        + addOns: list&lt;AddOn&gt;\n        + CalculateArea()\n        + CalculateAddOnCost()\n        + AddAddOn(addOn: Addon): void\n        + RemoveAddOn(addOnID: int): void\n        + GetAddOns(): list&lt;AddOn&gt;\n    }\n\n    class RateCard {\n        + itemType: string\n        + itemName: string\n        + rate: double\n        + GetRate(itemType: string, itemName: string): double\n        + UpdateRate(itemType: string, itemName: string, newRate: double): void\n    }\n\n    Quote &quot;1&quot; --&gt; &quot;many&quot; Window : contains\n    Customer &quot;1&quot; --&gt; &quot;many&quot; Project : has\n    Project &quot;1&quot; --&gt; &quot;many&quot; Quote : has\n    Window &quot;1&quot; --&gt; &quot;many&quot; Sash : contains\n    Sash &quot;1&quot; --&gt; &quot;many&quot; Glazing : has\n"},"Requirements/Revision-History":{"title":"Revision History","links":[],"tags":[],"content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersionDateDescription of ChangesAuthor1.010/09/2023Initial draftGilberto A."},"Requirements/Software-Requirements-Specification-(SRS)":{"title":"Software Requirements Specification (SRS)","links":["Requirements/Revision-History"],"tags":[],"content":"1. Introduction §\n1.1 Purpose §\nThis document specifies the software requirements for the Quoting Software intended for Gilberto Arellano Windows LLC, which aims to streamline the process of generating quotes for custom wood windows.\n1.2 Scope §\nThe software will provide functionalities for inputting window specifications, calculating costs, storing customer details, and generating quotes. While initially tailored for wood windows, the software aims to be scalable for all types of residential windows. Subsequent phases will include project management and analytics\n1.3 Definitions, Acronyms, and Abbreviations §\n\nSRS: Software Requirements Specification\nCRUD: Create, Read, Update, Delete\n\n2. Overall Description §\n2.1 Product Perspective §\nThe Gilberto Arellano Windows LLC Quoting Software is envisioned as a comprehensive tool to streamline the quote generation process for custom wood windows. While it will initially serve the immediate needs of Gilberto Arellano Windows LLC, the software is designed with scalability in mind, anticipating future enhancements and potential use by other window companies.\n2.2 User Classes and Characteristics §\n\nAdministrator: The primary user who will have full access to all features, including quote generation, project management, and analytics. This user will also have the ability to modify system settings and constants.\n(Future) Sales Team or Staff: Users who can generate and manage quotes but may not have access to system settings or high-level analytics.\n\n2.3 Operating Environment §\nThe software will initially be designed for desktop environments, with potential future adaptations for mobile and tablet devices. It will be web-based, ensuring accessibility from various devices without the need for dedicated installations.\n2.4 Design and Implementation Constraints §\nGiven the solo nature of the initial development, the software should prioritize simplicity and modularity. This ensures that future enhancements can be integrated seamlessly.\n2.5 Assumptions and Dependencies §\nThe software assumes that the pricing constants and other foundational data provided are accurate. Any third-party integrations in future phases will depend on the compatibility and availability of external APIs or services.\n3. System Features &amp; Phases §\nPhase 1: MVP §\n3.1.1 Quote Generation &amp; Retrieval §\nObjective: Simplify and digitize the quote generation process.\n\nInput Window Specifications:\n\nUsers can input various window specifications, including dimensions, wood type, finish, hardware, glazing/glass, and custom design. Each window will have a unique identifier (windowID) for easy referencing.\n\n\nCalculate Costs:\n\nThe system will automatically calculate costs based on the provided specifications.\n\n\nGenerate and Display Quotes:\n\nUsers can view the generated quote, which includes a detailed breakdown of costs. Each quote will have a unique identifier (quoteID) for easy referencing and tracking.\n\n\nSave and Retrieve Quotes:\n\nUsers can save quotes for future reference and retrieve them as needed.\n\n\n\nPhase 2: Project Management Light §\nObjective: Introduce basic project management capabilities to enhance the software’s utility.\n3.1.2 Customer Management §\n\nManage Customer Details:\n\nUsers can add, view, edit, and delete customer information.\n\n\nAssociate Quotes with Customers:\n\nSaved quotes can be linked to specific customers, providing a consolidated view of all quotes related to a particular customer.\n\n\n\n3.1.3 Project Status Tracking §\n\nTrack Project Progress:\n\nUsers can update the status of projects, marking them as “Pending”, “Approved”, “In Progress”, “Completed”, etc. Each project will have a unique identifier (projectID) for easy referencing and tracking.\n\n\nAdd Notes &amp; Comments:\n\nUsers can add relevant notes or comments to each project, providing context or additional information.\n\n\n\n3.1.4 Attachments &amp; Files §\n\nAssociate Files with Projects:\n\nUsers can attach relevant files or images to quotes or projects, such as sketches, designs, or photos of existing windows.\n\n\n\nPhase 3: Analytics &amp; Trends §\nObjective: Provide insights into business operations and customer preferences.\n3.1.5 Trends &amp; Analytics Dashboard §\n\nView Business Insights:\n\nUsers can access a dashboard that provides insights into popular wood types, finishes, and other customer preferences.\n\n\nTrack Key Metrics:\n\nThe dashboard will also display metrics like average quote values, number of quotes generated, project completion rates, etc.\n\n\nVisual Data Representation:\n\nData will be presented using charts, graphs, and other visual tools for easy interpretation.\n\n\n\n3.1.6 Historical Data Retrieval §\n\nAccess Past Data:\n\nUsers can retrieve past quotes and projects based on specific criteria, such as date range, customer, or project status.\n\n\n\n4. External Interface Requirements §\n4.1 User Interfaces §\nPhase 1: MVP §\n\nDesktop Interface:\n\nSimple, clean UI focusing on quote generation, retrieval, and detailed breakdown.\nBasic login mechanism for user authentication.\n\n\n\nPhase 2: Project Management Light §\n\nEnhanced Desktop Interface:\n\nAdditional sections/modules for customer management, project status tracking, and file attachments.\nImproved navigation to switch between quote generation and project management seamlessly.\n\n\n\nPhase 3: Analytics &amp; Trends §\nAnalytics Dashboard:\n\nVisual representations (charts, graphs) integrated into the UI for easier data interpretation.\nSearch and filter options for historical data retrieval.\n\n4.2 Software Interfaces §\nPhase 1: MVP §\n\nDatabase: CRUD operations focused on quote generation, storage, and retrieval.\nBackend: Handling quote calculations, storage, and retrieval.\nFrontend: Quote generation form, list of saved quotes, and detailed breakdown view.\n\nPhase 2: Project Management Light §\n\nDatabase: Extended CRUD operations for customer details, project status, and file attachments.\nBackend: Additional endpoints for customer management and project tracking.\nFrontend: Enhanced UI components for customer management and project tracking.\n\nPhase 3: Analytics &amp; Trends §\n\nDatabase: Queries optimized for analytics and trends.\nBackend: Endpoints for analytics data retrieval.\nFrontend: Dashboard components for visual data representation.\n\n5. Non-functional Requirements §\n5.1 Performance §\nPhase 1: MVP §\n\nResponse Time: Instant quote generation and retrieval.\nScalability: Designed for a single user but keeping future scalability in mind.\n\nPhase 2 &amp; 3 §\n\nEnhanced Scalability: As more features are added, ensure the system remains responsive and can handle additional data and users.\n\n5.2 Security §\nPhase 1: MVP §\n\nAuthentication: Basic login mechanism for user authentication.\nData Encryption: Basic encryption for stored quotes.\n\nPhase 2 &amp; 3 §\n\nEnhanced Authorization: Role-based access as more user types might be introduced, especially in the context of project management.\n\n5.3 Reliability §\nPhase 1: MVP §\n\nData Integrity: Ensure accurate quote calculations and storage.\n\nPhase 2 &amp; 3 §\n\nData Backup: As more data gets added (customer details, projects), implement more frequent data backup strategies.\n\n5.4 Usability §\nPhase 1: MVP §\n\nUser-Friendly Interface: Intuitive UI for quote generation and retrieval.\n\nPhase 2 &amp; 3 §\n\nEnhanced Navigation: Improved UI components for seamless navigation between different modules.\n\n5.5 Maintainability §\nAcross All Phases §\n\nModularity: Design the system in a modular fashion, allowing for easy updates and modifications.\nDocumentation: Maintain clear documentation for each phase, detailing new features and changes.\n\n6. Use Cases &amp; User Stories §\n6.1 Use Cases §\nUse Case 1: Generate a New Quote §\nPrimary Actor: Administrator\nScope: Quote Generation Module\nLevel: User Goal\nBrief:\nThe user inputs window specifications and the system calculates and displays a quote.\nFlow of Events:\n\nThe user logs into the system.\nThe user navigates to the “Generate Quote” section.\nThe user inputs window specifications, including dimensions, wood type, finish, hardware, glazing/glass, and special design. Each window inputted is assigned a unique windowID.\nThe system calculates the cost based on the provided specifications.\nThe system displays the generated quote with a detailed breakdown of costs. The generated quote is assigned a unique quoteID.\nThe user has the option to save the quote for future reference.\n\nExtensions:\n\n3a. If the user inputs invalid data, the system prompts the user to correct it.\n\n\nUse Case 2: Retrieve and Edit a Saved Quote §\nPrimary Actor: Administrator\nScope: Quote Retrieval Module\nLevel: User Goal\nBrief:\nThe user retrieves a previously saved quote and makes edits if necessary.\nFlow of Events:\n\nThe user logs into the system.\nThe user navigates to the “Saved Quotes” section.\nThe user selects a quote from the list using the quoteID.\nThe system displays the details of the selected quote.\nThe user edits the quote details as needed.\nThe system recalculates the quote based on the edits.\nThe user saves the updated quote.\n\nExtensions:\n\n5a. If the user inputs invalid data during editing, the system prompts the user to correct it.\n\n\n6.2 User Stories §\nUser Story 1 : §\nAs an administrator,\nI want to input window specifications,\nSo that I can generate a detailed quote for a customer.\nAcceptance Criteria:\n\nThe system should allow input for dimensions, wood type, finish, hardware, glazing/glass, and special design.\nThe system should display a quote based on the inputted specifications.\nThe quote should include a detailed breakdown of costs.\n\n\nUser Story 2: §\nAs an administrator,\nI want to retrieve and edit saved quotes,\nSo that I can make necessary changes based on updated requirements or corrections.\nAcceptance Criteria:\n\nThe system should list all saved quotes.\nThe user should be able to select a quote and view its details using the quoteID.\nThe user should be able to edit the quote details.\nThe system should recalculate the quote based on the edits.\n\n7. Appendices §\nAppendix A: Glossary §\nAdministrator: The primary user of the system, responsible for generating and managing quotes.\nAPI: Application Programming Interface - a set of tools and protocols that allow different software applications to communicate with each other.\nCRUD: Create, Read, Update, Delete - basic functions of persistent storage.\nQuote: An estimated cost for a specific set of window specifications.\nWindow Specifications: The details and attributes of a window, including dimensions, wood type, finish, hardware, glazing/glass, and special design.\n\nAppendix B: References §\n\nSan Francisco Historic Building Codes: [Link to the official website or document]\nWindow Constants Source: [Link or reference to where the window constants are derived from]\n\n\nAppendix C: Revision History §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersionDateDescription of ChangesAuthor1.010/09/2023Initial draftGilberto A.\n\n8. Index §\nA §\nAdministrator, 2, 6\nAPI, 3, 7\nAppendices, 8\nC §\nCRUD, 3, 7\nCustomer Management, 4\nQ §\nQuote, 2, 6\nQuote Generation, 3\nQuote Retrieval, 4\nW §\nWindow Specifications, 2, 6"},"index":{"title":"Welcome to SashSolutions 🪟","links":["Requirements/Software-Requirements-Specification-(SRS)","Design/UML-Diagrams/UML-Design","Design/UML-Diagrams/UML-Graph"],"tags":[],"content":"SashSolutions is a window quoting software tailored for Gilberto Arellano Windows.\nOverview &amp; Purpose of Documentation §\nShowcase an understanding of software engineering principles, planning, and systematic execution. . This documentation:\n\nExplains the software’s requirements, design choices, development process, testing methodologies, deployment strategies, and maintenance considerations.\nHighlights the rationale behind each decision, providing insights into the thought process.\nServes as a guide for future contributors, ensuring continuity in understanding and development.\n\nNavigating the Documentation §\n\nRequirements: Unveil the technical and business-centric requirements of the software.\nDesign: Dive into the UML design or graph\n\n\n\n                  \n                  Work in Progress \n                  \n                  \n                \n                \nDevelopment: §\n\nCoding Standards: Best practices and conventions adhered to during development.\nAPI Documentation: Details of any APIs in the software.\nIntegration Details: Insights into how different software components interconnect.\n\nTesting: §\n\nTest Plans: Strategy and approach towards ensuring the software’s reliability and accuracy.\nTest Cases: Specific scenarios derived from the SRS to verify the software’s functionality.\nTest Results: Outcomes of the various test cases and scenarios run.\n\nDeployment: §\n\nDeployment Guide: Instructions to deploy the software in different environments.\nEnvironment Configurations: Specific settings and configurations for different deployment environments.\n\nMaintenance: §\n\nRelease Notes: Updates, bug fixes, and features introduced in each version of the software.\nTroubleshooting Guide: Solutions to common problems.\nFAQ: Clarifications on frequent queries from users or developers.\n\nFeature Details: §\n\nQuote Generation &amp; Retrieval: Dive deep into the core feature of the software.\nProject Management: Explore the extended capabilities introduced in Phase 2.\nAnalytics &amp; Trends: Understand the insights and trends functionality planned for Phase 3.\n\nMiscellaneous: §\n\nGlossary: Definitions of specific terms and acronyms.\nResources: Essential tools, libraries, and references utilized in this project.\nContacts: Reach out to the development team and key individuals.\n\n\nContact &amp; Feedback §\nWhether you’re a developer, recruiter, or a curious mind, this documentation aims to provide answers to your questions and guide you through the software’s intricacies. If you come across any discrepancies, have suggestions or just want to reach out please feel free to\nemail me."}}